'''Workflow for the CAMP mOTUs profiling module.'''

from contextlib import redirect_stderr
import os
from os.path import abspath, basename, dirname, join
import pandas as pd
import shutil
from utils import Workflow_Dirs, ingest_samples


# Load and/or make the working directory structure
dirs = Workflow_Dirs(config['work_dir'], 'motus-profiler')


# Load sample names and input files 
SAMPLES = ingest_samples(config['samples'], dirs.TMP)


# Specify the location of any external resources and scripts
dirs_ext = join(dirname(abspath(__file__)), 'ext')
dirs_scr = join(dirs_ext, 'scripts')


def check_make(d):
    if not exists(d):
        os.makedirs(d)

# --- Workflow output --- #

rule all:
    input:
        # join(dirs.OUT, 'final_reports', 'samples.csv')
        expand(join(dirs.OUT, 'mOTU_taxonomic_profile', '{sample}', 'taxonomic_profile.txt'), sample=SAMPLES)

# --- Workflow steps --- #

rule motu_profile:
    input:
        fwd = join(dirs.TMP, '{sample}_1.fastq'),
        rev = join(dirs.TMP, '{sample}_2.fastq'),
    output:
        join(dirs.OUT, 'mOTU_taxonomic_profile', '{sample}', 'taxonomic_profile.txt'),
    conda:
        join(config['env_yamls'], 'motus-profiler.yaml'),
    log:
        join(dirs.LOG, 'mOTU_logs', '{sample}.out'),
    threads: config['motus_profiling_threads'],
    resources:
        mem_mb = lambda wildcards, attempt: \
              int(config['motus_profiling_mem_mb']) + 10000 * attempt,
    params:
        out_dir = join(dirs.OUT, 'mOTU_taxonomic_profile', '{sample}'),
    shell:
        """
	motus profile -f {input.fwd} -r {input.rev} -t {threads} -o {params.out_dir}/taxonomic_profile.txt > {log} 2>&1
        """
